const axios = require("axios");

module.exports = {
 config: {
  name: 'sakura',
  version: '2.0',
  author: 'NIB | JARiF | Enhanced',
  countDown: 3,
  role: 0,
  shortDescription: 'Sakura AI Chat',
  longDescription: {
   vi: 'Chat v·ªõi Sakura AI - tr·ª£ l√Ω th√¥ng minh ‚ô°',
   en: 'Chat with Sakura AI - your intelligent assistant ‚ô°'
  },
  category: 'AI',
  guide: {
   vi: '{pn} [on | off]: b·∫≠t/t·∫Øt sakura AI ‚ô°\n{pn} <tin nh·∫Øn>: chat v·ªõi sakura AI ‚ô°\n{pn} clear: x√≥a l·ªãch s·ª≠ chat\nV√≠ d·ª•: {pn} xin ch√†o',
   en: '{pn} [on | off]: enable/disable sakura AI ‚ô°\n{pn} <message>: chat with sakura AI ‚ô°\n{pn} clear: clear chat history\nExample: {pn} hello'
  }
 },

 langs: {
  vi: {
   turnedOn: '‚úÖ ƒê√£ b·∫≠t Sakura AI th√†nh c√¥ng! ‚ô°',
   turnedOff: '‚ùå ƒê√£ t·∫Øt Sakura AI th√†nh c√¥ng!',
   chatting: 'üí≠ Sakura ƒëang suy nghƒ©...',
   error: 'üòî Sakura ƒëang b·∫≠n, vui l√≤ng th·ª≠ l·∫°i sau nh√©!',
   cleared: 'üóëÔ∏è ƒê√£ x√≥a l·ªãch s·ª≠ chat v·ªõi Sakura!',
   noMessage: 'üí¨ B·∫°n mu·ªën n√≥i g√¨ v·ªõi Sakura?',
   thinking: 'üå∏ Sakura ƒëang suy nghƒ©...'
  },
  en: {
   turnedOn: '‚úÖ Sakura AI enabled successfully! ‚ô°',
   turnedOff: '‚ùå Sakura AI disabled successfully!',
   chatting: 'üí≠ Sakura is thinking...',
   error: 'üòî Sakura is busy right now, please try again later!',
   cleared: 'üóëÔ∏è Chat history with Sakura cleared!',
   noMessage: 'üí¨ What would you like to say to Sakura?',
   thinking: 'üå∏ Sakura is thinking...'
  }
 },

 onStart: async function ({ args, threadsData, message, event, getLang }) {
  if (args[0] === 'on' || args[0] === 'off') {
   await threadsData.set(event.threadID, args[0] === "on", "settings.sakura");
   return message.reply(args[0] === "on" ? getLang("turnedOn") : getLang("turnedOff"));
  }

  if (args[0] === 'clear') {
   if (!global.sakuraHistory) global.sakuraHistory = {};
   global.sakuraHistory[event.senderID] = [];
   return message.reply(getLang("cleared"));
  }

  if (args[0]) {
   const yourMessage = args.join(" ");
   const thinkingMsg = await message.reply(getLang("thinking"));

   try {
    const langCode = (await threadsData.get(event.threadID, "settings.lang")) || global.GoatBot.config.language;
    const responseMessage = await getMessage(yourMessage, langCode, event.senderID);
    message.unsend(thinkingMsg.messageID);
    return message.reply(`üå∏ Sakura: ${responseMessage}`);
   } catch (err) {
    console.error("Sakura error:", err);
    message.unsend(thinkingMsg.messageID);
    return message.reply(getLang("error"));
   }
  } else {
   return message.reply(getLang("noMessage"));
  }
 },

 onChat: async ({ args, message, threadsData, event, isUserCallCommand, getLang }) => {
  if (args.length > 1 && !isUserCallCommand && (await threadsData.get(event.threadID, "settings.sakura"))) {
   try {
    const langCode = (await threadsData.get(event.threadID, "settings.lang")) || global.GoatBot.config.language;
    const responseMessage = await getMessage(args.join(" "), langCode, event.senderID);
    return message.reply(`üå∏ ${responseMessage}`);
   } catch (err) {
    console.error("Sakura chat error:", err);
    return message.reply(getLang("error"));
   }
  }
 }
};

// Initialize chat history
if (!global.sakuraHistory) {
 global.sakuraHistory = {};
}

async function getMessage(yourMessage, langCode, senderID) {
 if (!global.sakuraHistory[senderID]) {
  global.sakuraHistory[senderID] = [];
 }

 try {
  const res = await axios.post(
   'https://api.simsimi.vn/v1/simtalk',
   new URLSearchParams({
    'text': yourMessage,
    'lc': langCode || 'en'
   }),
   {
    timeout: 10000,
    headers: {
     'Content-Type': 'application/x-www-form-urlencoded',
     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
   }
  );

  if (res.status === 200 && res.data && res.data.message) {
   global.sakuraHistory[senderID].push({
    user: yourMessage,
    sakura: res.data.message,
    timestamp: Date.now()
   });

   if (global.sakuraHistory[senderID].length > 10) {
    global.sakuraHistory[senderID] = global.sakuraHistory[senderID].slice(-10);
   }

   return res.data.message;
  } else {
   throw new Error("Invalid response from primary API");
  }
 } catch (error) {
  console.log("Primary API failed, trying fallback...");

  const fallbackResponses = {
   en: [
    "I'm sorry, I'm having trouble understanding right now. Could you try again?",
    "That's interesting! Tell me more about that.",
    "I'm processing what you said. Can you rephrase that?",
    "I appreciate you talking to me! What else would you like to discuss?",
    "I'm here to chat with you! What's on your mind?"
   ],
   vi: [
    "Xin l·ªói, m√¨nh ƒëang g·∫∑p ch√∫t kh√≥ khƒÉn. B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i kh√¥ng?",
    "Th·∫≠t th√∫ v·ªã! K·ªÉ cho m√¨nh nghe th√™m v·ªÅ ƒëi·ªÅu ƒë√≥.",
    "M√¨nh ƒëang x·ª≠ l√Ω nh·ªØng g√¨ b·∫°n n√≥i. B·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng?",
    "C·∫£m ∆°n b·∫°n ƒë√£ tr√≤ chuy·ªán v·ªõi m√¨nh! B·∫°n mu·ªën n√≥i v·ªÅ g√¨ n·ªØa?",
    "M√¨nh ·ªü ƒë√¢y ƒë·ªÉ chat v·ªõi b·∫°n! B·∫°n ƒëang nghƒ© g√¨ th·∫ø?"
   ]
  };

  const responses = fallbackResponses[langCode] || fallbackResponses.en;
  const randomResponse = responses[Math.floor(Math.random() * responses.length)];

  return randomResponse;
 }
}
